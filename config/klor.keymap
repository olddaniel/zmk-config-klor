//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "keys_pt_abnt2.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cedilha: cedilha {
            compatible = "zmk,behavior-mod-morph";
            label = "CEDILHA";
            bindings = <&hm LEFT_SHIFT C>, <&kp PT_C_CEDILLA>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PT_DOT>, <&kp PT_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_equal: comma_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EQUAL";
            bindings = <&kp PT_COMMA>, <&kp PT_EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_masculine_ordinal: o_masculine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "O_MASCULINE_ORDINAL";
            bindings = <&kp O>, <&kp PT_MASCULINE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_8_ampersand: control_8_ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_8_AMPERSAND";
            bindings = <&mt RIGHT_CONTROL KP_NUMBER_8>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        control_S_dollar: control_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_S_DOLLAR";
            bindings = <&mt RIGHT_CONTROL S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        command_H_hash: command_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_H_HASH";
            bindings = <&mt RIGHT_COMMAND A>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        command_A_feminine_ordinal: command_A_feminine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_A_FEMININE_ORDINAL";
            bindings =
                <&mt LEFT_COMMAND A>,
                <&kp PT_FEMININE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_1_pipe: control_1_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_1_PIPE";
            bindings = <&mt LEFT_CONTROL KP_NUMBER_1>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        apost_slash: apost_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "APOST_SLASH";
            bindings = <&kp APOS>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        super_shift: super_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_SHIFT";
            bindings = <&hold_sticky LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_cedilha: shift_cedilha {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_CEDILHA";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&cedilha>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Esc_one_handed {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };

        to_layer_0 {
            bindings = <&to 0>;
            key-positions = <38 4 30>;
            layers = <3>;
        };

        to_layer_1 {
            bindings = <&to 1>;
            key-positions = <38 14 30>;
        };

        to_layer_2 {
            bindings = <&to 2>;
            key-positions = <38 24 30>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <15 14>;
        };

        sticky_layer_1 {
            bindings = <&sl 1>;
            key-positions = <14 32>;
        };

        sticky_layer_2 {
            bindings = <&sl 2>;
            key-positions = <24 32>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <13 2>;
            layers = <0>;
        };

        to_layer_3 {
            bindings = <&to 3>;
            key-positions = <38 4 30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        Engram {
            bindings = <
&kp B               &kp Y               &o_masculine_ordinal  &kp U                        &kp V                            &kp J                  &kp L            &kp D            &kp W              &kp Q
&shift_cedilha C 0  &hm LEFT_CONTROL I  &hm LEFT_ALT E        &command_A_feminine_ordinal  &comma_equal                     &dot_colon             &command_H_hash  &hm RIGHT_ALT T  &control_S_dollar  &hm RIGHT_SHIFT N
&kp G               &kp X               &kp Z                 &kp K                        &apost_slash                     &question_exclamation  &kp R            &kp M            &kp F              &kp P
                                        &mt LEFT_COMMAND TAB  &hm LEFT_SHIFT SPACE         &backspace_delete  &none  &none  &kp ENTER              &super_shift     &kp ESC
            >;
        };

        Nav+Num+Symb {
            bindings = <
&kp LEFT         &kp DOWN             &kp UP                    &kp RIGHT                     &to 0                            &kp MINUS        &kp KP_PLUS                    &kp KP_EQUAL               &kp PERCENT           &kp BACKSLASH
&kp KP_NUMBER_0  &control_1_pipe      &mt LEFT_ALT KP_NUMBER_2  &mt LEFT_COMMAND KP_NUMBER_3  &kp KP_NUMBER_4                  &kp KP_NUMBER_5  &mt RIGHT_COMMAND KP_NUMBER_6  &mt RIGHT_ALT KP_NUMBER_7  &control_8_ampersand  &kp KP_NUMBER_9
&kp LESS_THAN    &kp PT_LEFT_BRACKET  &kp LEFT_BRACE            &kp LEFT_PARENTHESIS          &kp KP_DIVIDE                    &kp KP_MULTIPLY  &kp RIGHT_PARENTHESIS          &kp RIGHT_BRACE            &kp PT_RIGHT_BRACKET  &kp GREATER_THAN
                                      &trans                    &trans                        &trans           &trans  &trans  &trans           &trans                         &trans
            >;
        };

        Productivity+Controls {
            bindings = <
&kp LG(N)      &kp LG(T)  &kp LG(X)  &kp LG(A)    &to 0                      &out OUT_TOG     &rgb_ug RGB_BRI  &bt BT_NXT    &kp PG_UP     &kp C_POWER
&kp LG(Q)      &kp LG(W)  &kp LG(C)  &kp LG(V)    &kp LG(R)                  &rgb_ug RGB_EFF  &kp PT_ACUTE     &kp PT_TILDE  &kp PT_CARET  &kp PT_GRAVE
&kp LG(LS(L))  &kp LG(S)  &kp LG(Z)  &kp LG(DOT)  &kp LG(F)                  &rgb_ug RGB_TOG  &rgb_ug RGB_BRD  &bt BT_CLR    &kp PG_DN     &kp CAPS
                          &trans     &trans       &trans     &trans  &trans  &trans           &trans           &trans
            >;
        };

        Qwerty {
            bindings = <
&kp Q  &kp W               &kp E           &kp R               &kp T                   &kp Y   &kp U                &kp I            &kp O                &kp P
&kp A  &hm LEFT_CONTROL S  &hm LEFT_ALT D  &hm LEFT_COMMAND F  &kp G                   &kp H   &hm RIGHT_COMMAND J  &hm RIGHT_ALT K  &hm RIGHT_CONTROL L  &none
&kp Z  &kp X               &cedilha        &kp V               &kp B                   &kp N   &kp M                &comma_equal     &dot_colon           &question_exclamation
                           &trans          &trans              &trans  &trans  &trans  &trans  &trans               &trans
            >;
        };
    };
};
