//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        dt_apost_slash: dt_apost_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_APOST_SLASH";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp KP_SLASH>;
        };

        dt_dot_semicolon: dt_dot_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_DOT_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp SEMI>;
        };

        dt_K_layer1: dt_K_layer1 {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_K_LAYER1";
            #binding-cells = <0>;
            bindings = <&kp K>, <&to 1>;
        };

        dp_J_backslash_pipe: dp_J_backslash_pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "DP_J_BACKSLASH_PIPE";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp BACKSLASH>;
        };
    };

    combos {
        compatible = "zmk,combos";

        L_Exclamation {
            bindings = <&kp EXCL>;
            key-positions = <30 37>;
            layers = <0>;
        };

        R_Exclamation {
            bindings = <&kp EXCL>;
            key-positions = <30 42>;
            layers = <0>;
        };

        L_Equal {
            bindings = <&kp KP_EQUAL>;
            key-positions = <37 15>;
            layers = <0>;
        };

        R_Equal {
            bindings = <&kp KP_EQUAL>;
            key-positions = <15 42>;
            layers = <0>;
        };

        R_Colon {
            bindings = <&kp COLON>;
            key-positions = <42 16>;
            layers = <0>;
        };

        L_Colon {
            bindings = <&kp COLON>;
            key-positions = <16 37>;
            layers = <0>;
        };

        Esc_one_handed {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        Engram {
            bindings = <
       &kp B  &kp Y               &kp O           &kp U                 &dt_K_layer1                               &dp_J_backslash_pipe  &kp L                  &kp D            &kp W                &kp Q
&none  &kp C  &hm LEFT_CONTROL I  &hm LEFT_ALT E  &hm LEFT_COMMAND A    &kp KP_COMMA                               &dt_dot_semicolon     &hm RIGHT_COMMAND H    &hm RIGHT_ALT T  &hm RIGHT_CONTROL S  &kp N  &none
&none  &kp G  &kp X               &kp Z           &kp V                 &dt_apost_slash  &trans  &kp C_PLAY_PAUSE  &kp QUESTION          &kp R                  &kp M            &kp F                &kp P  &none
                                  &lt 2 TAB       &mt LEFT_SHIFT SPACE  &kp BACKSPACE    &trans  &trans            &kp DEL               &mt RIGHT_SHIFT ENTER  &kp ESC
            >;
        };

        Nav+Mouse+Num+Symb {
            bindings = <
        &kp LEFT   &kp DOWN                    &kp UP                     &kp RIGHT                          &to 0                     &none   &none                                &none                        &none                           &none
&trans  &kp MINUS  &mt LEFT_CONTROL LESS_THAN  &mt LEFT_ALT LEFT_BRACKET  &mt LEFT_COMMAND LEFT_PARENTHESIS  &kp PLUS                  &trans  &mt RIGHT_COMMAND RIGHT_PARENTHESIS  &mt RIGHT_ALT RIGHT_BRACKET  &mt RIGHT_CONTROL GREATER_THAN  &none   &trans
&trans  &kp N0     &kp N1                      &kp N2                     &kp N3                             &kp N4    &trans  &trans  &kp N5  &kp N6                               &kp N7                       &kp N8                          &kp N9  &trans
                                               &trans                     &trans                             &trans    &trans  &trans  &trans  &trans                               &trans
            >;
        };

        Productivity+Controls {
            bindings = <
        &kp LG(N)      &kp LG(T)  &kp LG(X)  &kp LG(A)    &to 0                      &kp PAGE_UP    &trans  &trans            &trans     &kp C_POWER
&trans  &kp LG(Q)      &kp LG(W)  &kp LG(C)  &kp LG(V)    &kp LG(R)                  &kp PAGE_DOWN  &none   &trans            &trans     &trans       &trans
&trans  &kp LG(LS(L))  &kp LG(S)  &kp LG(Z)  &kp LG(DOT)  &kp LG(F)  &trans  &trans  &trans         &none   &kp LG(KP_COMMA)  &kp LG(P)  &kp CLCK     &trans
                                  &trans     &trans       &trans     &trans  &trans  &trans         &trans  &trans
            >;
        };
    };
};
