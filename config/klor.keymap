//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        tt_slash: tt_slash {
            compatible = "zmk,behavior-tap-dance";
            label = "TT_SLASH";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp KP_SLASH>, <&kp BACKSLASH>;
        };

        dt_semicolon: dt_semicolon {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_SEMICOLON";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp SEMI>;
        };

        qt_open_parentesis: qt_open_parentesis {
            compatible = "zmk,behavior-tap-dance";
            label = "QT_OPEN_PARENTESIS";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp LEFT_BRACE>,
                <&kp LEFT_BRACKET>,
                <&kp LESS_THAN>;
        };

        qt_close_parentesis: qt_close_parentesis {
            compatible = "zmk,behavior-tap-dance";
            label = "QT_CLOSE_PARENTESIS";
            #binding-cells = <0>;
            bindings =
                <&kp RIGHT_PARENTHESIS>,
                <&kp RIGHT_BRACE>,
                <&kp RIGHT_BRACKET>,
                <&kp GREATER_THAN>;
        };

        dt_Q: dt_Q {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_Q";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp Q>;
        };

        dt_J: dt_J {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_J";
            #binding-cells = <0>;
            bindings = <&kp KP_COMMA>, <&kp J>;
        };
    };

    combos {
        compatible = "zmk,combos";

        L_Exclamation {
            bindings = <&kp EXCL>;
            key-positions = <30 37>;
            layers = <0>;
        };

        R_Exclamation {
            bindings = <&kp EXCL>;
            key-positions = <30 42>;
            layers = <0>;
        };

        L_Equal {
            bindings = <&kp KP_EQUAL>;
            key-positions = <37 15>;
            layers = <0>;
        };

        R_Equal {
            bindings = <&kp KP_EQUAL>;
            key-positions = <15 42>;
            layers = <0>;
        };

        R_Colon {
            bindings = <&kp COLON>;
            key-positions = <42 16>;
            layers = <0>;
        };

        L_Colon {
            bindings = <&kp COLON>;
            key-positions = <16 37>;
            layers = <0>;
        };

        Esc {
            bindings = <&kp ESC>;
            key-positions = <38 41>;
        };

        Esc_one_handed {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        Engram {
            bindings = <
       &kp B  &kp Y               &kp O           &kp U                 &qt_open_parentesis                            &qt_close_parentesis  &kp L                  &kp D            &kp W                &kp V
&none  &kp C  &hm LEFT_CONTROL I  &hm LEFT_ALT E  &hm LEFT_COMMAND A    &dt_J                                          &dt_semicolon         &hm RIGHT_COMMAND H    &hm RIGHT_ALT T  &hm RIGHT_CONTROL S  &kp N  &none
&none  &kp G  &kp X               &kp Z           &dt_Q                 &tt_slash            &trans  &kp C_PLAY_PAUSE  &kp QUESTION          &kp R                  &kp M            &kp F                &kp P  &none
                                  &lt 2 TAB       &mt LEFT_SHIFT SPACE  &kp BACKSPACE        &trans  &trans            &kp DEL               &mt RIGHT_SHIFT ENTER  &trans
            >;
        };

        Nav+Mouse+Num+Symb {
            bindings = <
        &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &to 0                     &mkp LCLK  &mmv MOVE_LEFT  &mwh SCROLL_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT
&trans  &kp MINUS  &kp LCTRL  &kp LALT  &kp LGUI   &kp PLUS                  &mkp RCLK  &kp RGUI        &kp RALT          &kp LCTRL     &mkp MCLK        &trans
&trans  &kp N0     &kp N1     &kp N2    &kp N3     &kp N4    &trans  &trans  &kp N5     &kp N6          &kp N7            &kp N8        &kp N9           &trans
                              &trans    &trans     &trans    &trans  &trans  &trans     &trans          &trans
            >;
        };

        Productivity+Acentuation {
            bindings = <
        &kp LG(N)  &kp LG(T)  &kp LG(X)         &kp LG(A)    &to 0                   &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(Q)  &kp LG(W)  &kp LG(C)         &kp LG(V)    &none                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(P)  &kp LG(S)  &kp LG(KP_COMMA)  &kp LG(DOT)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                              &trans            &trans       &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        One_shot_layer {
            bindings = <
        &kp C_VOICE_COMMAND  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &kp CAPSLOCK         &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans               &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
