//                               █         █    █            ▄▄▄▀▀▀▀▀▀▄▄▄        █▀▀▀▀▀▀▀▀▀▀█
//                               █        █     █          ▄▀            ▀▄      █          █
//                               █       █      █        ▄▀                ▀▄    █          █
//                               █      █       █        █                  █    █          █
//                               █     █        █       █                    █   █          █
//                               █    █         █       █                    █   █▄▄▄▄▄▄▄▄▄▄█
//                               █   █ █        █       █                    █   █      █
//                               █  █   █       █        █                  █    █       █
//                               █ █     █      █        ▀▄                ▄▀    █        █
//                               ██       █     █          ▀▄            ▄▀      █         █
//                               █         █    █▄▄▄▄▄▄▄▄    ▀▀▀▄▄▄▄▄▄▀▀▀        █          █
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "keys_pt_abnt2.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        cecedilha: cecedilha {
            compatible = "zmk,behavior-mod-morph";
            label = "CECEDILHA";
            bindings = <&hm LEFT_SHIFT C>, <&kp PT_C_CEDILLA>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PT_DOT>, <&kp PT_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_equal: comma_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_EQUAL";
            bindings = <&kp PT_COMMA>, <&kp PT_EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        o_masculine_ordinal: o_masculine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "O_MASCULINE_ORDINAL";
            bindings = <&kp O>, <&kp PT_MASCULINE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_S_dollar: control_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_S_DOLLAR";
            bindings = <&mt RIGHT_CONTROL S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        command_H_hash: command_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMAND_H_HASH";
            bindings = <&mt RIGHT_COMMAND A>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_A_feminine_ordinal: control_A_feminine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_A_FEMININE_ORDINAL";
            bindings =
                <&mt LEFT_CONTROL A>,
                <&kp PT_FEMININE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        control_1_pipe: control_1_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_1_PIPE";
            bindings = <&mt LEFT_CONTROL KP_NUMBER_1>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apost_slash: apost_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "APOST_SLASH";
            bindings = <&kp APOS>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        super_shift: super_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SUPER_SHIFT";
            bindings = <&hold_sticky LEFT_SHIFT LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        control_C_cecedilha: control_C_cecedilha {
            compatible = "zmk,behavior-mod-morph";
            label = "CONTROL_C_CECEDILHA";
            bindings = <&hm LEFT_CONTROL C>, <&kp PT_C_CEDILLA>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        shift_A_feminine_ordinal: shift_A_feminine_ordinal {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_A_FEMININE_ORDINAL";
            bindings = <&hm LEFT_SHIFT A>, <&kp PT_FEMININE_ORDINAL_INDICATOR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        shift_H_hash: shift_H_hash {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_H_HASH";
            bindings = <&hm RIGHT_SHIFT H>, <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_S_dollar: alt_S_dollar {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_S_DOLLAR";
            bindings = <&hm RIGHT_ALT S>, <&kp DOLLAR>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash: comma_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH";
            bindings = <&kp PT_COMMA>, <&kp KP_SLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        layer_2_X_percentage: layer_2_X_percentage {
            compatible = "zmk,behavior-mod-morph";
            label = "LAYER_2_X_PERCENTAGE";
            bindings = <&lt 2 X>, <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        B_Ampersand: B_Ampersand {
            compatible = "zmk,behavior-mod-morph";
            label = "B_AMPERSAND";
            bindings = <&kp B>, <&kp AMPERSAND>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        alt_i_pipe: alt_i_pipe {
            compatible = "zmk,behavior-mod-morph";
            label = "ALT_I_PIPE";
            bindings = <&hm LEFT_ALT I>, <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        U_underscore: U_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "U_UNDERSCORE";
            bindings = <&kp U>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        comma_slash_backslash: comma_slash_backslash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SLASH_BACKSLASH";
            bindings = <&comma_slash>, <&kp PT_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        minus_equal: minus_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_EQUAL";
            bindings = <&kp KP_MINUS>, <&kp KP_EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_asterisk: plus_asterisk {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_ASTERISK";
            bindings = <&kp KP_PLUS>, <&kp KP_ASTERISK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        open_parentesis_less: open_parentesis_less {
            compatible = "zmk,behavior-mod-morph";
            label = "OPEN_PARENTESIS_LESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        close_parentesis_greater: close_parentesis_greater {
            compatible = "zmk,behavior-mod-morph";
            label = "CLOSE_PARENTESIS_GREATER";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Esc_one_handed {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };

        to_Engram {
            bindings = <&to 0>;
            key-positions = <38 31 23>;
            layers = <2 5>;
        };

        to_Num_Sym_Nav {
            bindings = <&to 2>;
            key-positions = <38 21 31>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <15 14>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <13 2>;
            layers = <0>;
        };

        to_Qwerty {
            bindings = <&to 5>;
            key-positions = <38 31 22>;
            layers = <2 0>;
        };

        to_productivity {
            bindings = <&to 1>;
            key-positions = <31 20>;
        };

        enter_one_handed {
            bindings = <&kp ENTER>;
            key-positions = <3 2>;
        };

        minus_equal {
            bindings = <&minus_equal>;
            key-positions = <6 7>;
        };

        plus_asterisc {
            bindings = <&plus_asterisk>;
            key-positions = <26 27>;
        };

        open_parentesis_less {
            bindings = <&open_parentesis_less>;
            key-positions = <7 8>;
        };

        close_parentesis_greater {
            bindings = <&close_parentesis_greater>;
            key-positions = <27 28>;
        };

        open_bracket_brace {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
        };

        close_bracket_brace {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        Engram {
            bindings = <
&hm GLOBE B  &kp Y               &o_masculine_ordinal  &kp U                        &kp G                            &kp Q                  &kp L            &kp D            &kp W              &kp J
&cecedilha   &hm LEFT_CONTROL I  &hm LEFT_ALT E        &control_A_feminine_ordinal  &comma_equal                     &dot_colon             &command_H_hash  &hm RIGHT_ALT T  &control_S_dollar  &hm RIGHT_SHIFT N
&lt 1 V      &lt 2 X             &kp Z                 &kp K                        &apost_slash                     &question_exclamation  &kp R            &kp M            &kp F              &kp P
                                 &hm LEFT_SHIFT TAB    &kp SPACE                    &backspace_delete  &none  &none  &kp ESC                &kp ENTER        &super_shift
            >;
        };

        Productivity {
            bindings = <
&none   &kp LG(Q)      &kp LG(W)  &kp LG(T)  &kp LG(N)                    &out OUT_TOG     &rgb_ug RGB_BRI  &bt BT_NXT    &kp PG_UP     &kp C_POWER
&none   &kp LG(X)      &kp LG(C)  &kp LG(V)  &kp LG(A)                    &rgb_ug RGB_EFF  &kp PT_ACUTE     &kp PT_TILDE  &kp PT_CARET  &kp PT_GRAVE
&trans  &kp LG(LS(L))  &kp LG(F)  &kp LG(Z)  &kp LG(DOT)                  &rgb_ug RGB_TOG  &rgb_ug RGB_BRD  &bt BT_CLR    &kp PG_DN     &kp CAPS
                       &trans     &trans     &trans       &trans  &trans  &trans           &trans           &trans
            >;
        };

        Num+Symb+Nav {
            bindings = <
&kp LEFT         &kp DOWN             &kp UP                    &kp RIGHT                     &kp MINUS                        &kp KP_PLUS      &kp KP_EQUAL                   &kp PERCENT                &kp AMPERSAND                  &kp BACKSLASH
&kp KP_NUMBER_0  &control_1_pipe      &hm LEFT_ALT KP_NUMBER_2  &hm LEFT_COMMAND KP_NUMBER_3  &kp KP_NUMBER_4                  &kp KP_NUMBER_5  &hm RIGHT_COMMAND KP_NUMBER_6  &hm RIGHT_ALT KP_NUMBER_7  &hm RIGHT_CONTROL KP_NUMBER_8  &kp KP_NUMBER_9
&kp LESS_THAN    &kp PT_LEFT_BRACKET  &kp LEFT_BRACE            &kp LEFT_PARENTHESIS          &kp KP_DIVIDE                    &kp KP_MULTIPLY  &kp RIGHT_PARENTHESIS          &kp RIGHT_BRACE            &kp PT_RIGHT_BRACKET           &kp GREATER_THAN
                                      &trans                    &trans                        &trans           &trans  &trans  &trans           &trans                         &trans
            >;
        };

        New_Engram {
            bindings = <
&B_Ampersand          &kp Y                  &o_masculine_ordinal  &U_underscore              &kp Z                                 &kp G                  &kp L          &kp D                &kp W          &kp Q
&control_C_cecedilha  &alt_i_pipe            &hm LEFT_COMMAND E    &shift_A_feminine_ordinal  &comma_slash_backslash                &dot_colon             &shift_H_hash  &hm RIGHT_COMMAND T  &alt_S_dollar  &hm RIGHT_CONTROL N
&lt 1 V               &layer_2_X_percentage  &kp J                 &kp K                      &kp APOS                              &question_exclamation  &kp R          &kp M                &kp F          &kp P
                                             &hm LEFT_SHIFT TAB    &kp SPACE                  &backspace_delete       &none  &none  &kp ESC                &kp ENTER      &super_shift
            >;
        };

        New_Num_Nav {
            bindings = <
&kp KP_DIVIDE                 &kp KP_MULTIPLY           &kp KP_MINUS                  &kp KP_PLUS                 &kp KP_EQUAL                     &trans           &trans                       &trans                         &trans                     &trans
&hm LEFT_CONTROL KP_NUMBER_0  &hm LEFT_ALT KP_NUMBER_1  &hm LEFT_COMMAND KP_NUMBER_2  &hm LEFT_SHIFT KP_NUMBER_3  &kp KP_NUMBER_4                  &kp KP_NUMBER_5  &hm RIGHT_SHIFT KP_NUMBER_6  &hm RIGHT_COMMAND KP_NUMBER_7  &hm RIGHT_ALT KP_NUMBER_8  &hm RIGHT_CONTROL KP_NUMBER_9
&kp KP_NUMBER_5               &kp KP_NUMBER_6           &kp KP_NUMBER_7               &kp KP_NUMBER_8             &kp KP_NUMBER_9                  &mkp LCLK        &kp LEFT_ARROW               &kp DOWN                       &kp UP                     &kp RIGHT
                                                        &trans                        &trans                      &trans           &trans  &trans  &trans           &trans                       &trans
            >;
        };

        Qwerty {
            bindings = <
&kp Q  &kp W               &kp E           &kp R               &kp T                   &kp Y   &kp U                &kp I            &kp O                &kp P
&kp A  &hm LEFT_CONTROL S  &hm LEFT_ALT D  &hm LEFT_COMMAND F  &kp G                   &kp H   &hm RIGHT_COMMAND J  &hm RIGHT_ALT K  &hm RIGHT_CONTROL L  &none
&kp Z  &kp X               &cecedilha      &kp V               &kp B                   &kp N   &kp M                &comma_equal     &dot_colon           &question_exclamation
                           &trans          &trans              &trans  &trans  &trans  &trans  &trans               &trans
            >;
        };
    };
};
